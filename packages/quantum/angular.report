
> @spin-network/quantum@0.1.0 test /Users/deepak/code/spin_network_app/packages/quantum
> vitest run __tests__/angularMomentum/composition.test.ts __tests__/angularMomentum/operators.test.ts __tests__/angularMomentum/states.test.ts __tests__/angularMomentum/wignerSymbols.test.ts

[33mThe CJS build of Vite's Node API is deprecated. See https://vite.dev/guide/troubleshooting.html#vite-cjs-node-api-deprecated for more details.[39m

 RUN  v1.6.1 /Users/deepak/code/spin_network_app/packages/quantum

 ‚ùØ __tests__/angularMomentum/wignerSymbols.test.ts  (0 test) 2ms
 ‚ùØ __tests__/angularMomentum/composition.test.ts  (4 tests | 3 failed) 5ms
   ‚ùØ __tests__/angularMomentum/composition.test.ts > Angular Momentum Composition > Clebsch-Gordan Coefficients > should correctly calculate coefficients for two spin-1/2 particles
     ‚Üí expected 0.7071067811865475 to be less than 1e-10
   ‚ùØ __tests__/angularMomentum/composition.test.ts > Angular Momentum Composition > Clebsch-Gordan Coefficients > should correctly calculate coefficients for j1=1, j2=1/2 case
     ‚Üí expected 1 to be less than 1e-10
   ‚ùØ __tests__/angularMomentum/composition.test.ts > Angular Momentum Composition > Angular Momentum Addition > should correctly add two spin-1/2 states
     ‚Üí expected 1 to be less than 1e-10
stdout | __tests__/angularMomentum/operators.test.ts > Angular Momentum Operators > Eigenvalue Equations > should satisfy Jz eigenvalue equation
StateVector {
  dimension: 2,
  amplitudes: [ Complex { re: 0, im: 0 }, Complex { re: 0.5, im: 0 } ],
  basis: '|1‚ü©',
  properties: undefined
} object

 ‚ùØ __tests__/angularMomentum/operators.test.ts  (11 tests | 6 failed) 10ms
   ‚ùØ __tests__/angularMomentum/operators.test.ts > Angular Momentum Operators > j=1/2 Matrix Representations > should have correct Jz matrix elements
     ‚Üí expected Complex{ re: -0.5, im: +0 } to deeply equal Complex{ re: 0.5, im: +0 }
   ‚ùØ __tests__/angularMomentum/operators.test.ts > Angular Momentum Operators > j=1/2 Matrix Representations > should have correct J¬± matrix elements
     ‚Üí expected Complex{ re: 1, im: +0 } to deeply equal Complex{ re: +0, im: +0 }
   ‚ùØ __tests__/angularMomentum/operators.test.ts > Angular Momentum Operators > Eigenvalue Equations > should satisfy Jz eigenvalue equation
     ‚Üí expected false to be true // Object.is equality
   ‚ùØ __tests__/angularMomentum/operators.test.ts > Angular Momentum Operators > Eigenvalue Equations > should satisfy J¬≤ eigenvalue equation
     ‚Üí expected false to be true // Object.is equality
   ‚ùØ __tests__/angularMomentum/operators.test.ts > Angular Momentum Operators > Commutation Relations > should satisfy [Jx,Jy] = iJz
     ‚Üí expected false to be true // Object.is equality
   ‚ùØ __tests__/angularMomentum/operators.test.ts > Angular Momentum Operators > J¬≤ Construction > should give same results for both J¬≤ construction methods
     ‚Üí expected false to be true // Object.is equality
 ‚ùØ __tests__/angularMomentum/states.test.ts  (10 tests | 5 failed) 10ms
   ‚ùØ __tests__/angularMomentum/states.test.ts > Angular Momentum States > j=1/2 State Vectors > should have correct components for |1/2,1/2‚ü©
     ‚Üí expected false to be true // Object.is equality
   ‚ùØ __tests__/angularMomentum/states.test.ts > Angular Momentum States > j=1/2 State Vectors > should have correct components for |1/2,-1/2‚ü©
     ‚Üí expected false to be true // Object.is equality
   ‚ùØ __tests__/angularMomentum/states.test.ts > Angular Momentum States > Raising and Lowering Operations > should correctly raise states
     ‚Üí expected false to be true // Object.is equality
   ‚ùØ __tests__/angularMomentum/states.test.ts > Angular Momentum States > Raising and Lowering Operations > should correctly lower states
     ‚Üí expected false to be true // Object.is equality
   ‚ùØ __tests__/angularMomentum/states.test.ts > Angular Momentum States > Raising and Lowering Operations > should annihilate highest/lowest weight states
     ‚Üí expected false to be true // Object.is equality

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ Failed Suites 2 ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ

 FAIL  __tests__/angularMomentum/wignerSymbols.test.ts [ __tests__/angularMomentum/wignerSymbols.test.ts ]
Error: No test found in suite __tests__/angularMomentum/wignerSymbols.test.ts
‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[1/16]‚éØ

 FAIL  __tests__/angularMomentum/wignerSymbols.test.ts > Wigner Symbols
Error: No test found in suite Wigner Symbols
‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[2/16]‚éØ

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ Failed Tests 14 ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ

 FAIL  __tests__/angularMomentum/composition.test.ts > Angular Momentum Composition > Clebsch-Gordan Coefficients > should correctly calculate coefficients for two spin-1/2 particles
AssertionError: expected 0.7071067811865475 to be less than 1e-10
 ‚ùØ __tests__/angularMomentum/composition.test.ts:26:77
     24|       // Singlet state (j=0)
     25|       const c1 = clebschGordan(0.5, 0.5, 0.5, -0.5, 0, 0);
     26|       expect(math.abs(math.subtract(c1, math.complex(-1/Math.sqrt(2), ‚Ä¶
       |                                                                             ^
     27|       
     28|       const c2 = clebschGordan(0.5, -0.5, 0.5, 0.5, 0, 0);

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[3/16]‚éØ

 FAIL  __tests__/angularMomentum/composition.test.ts > Angular Momentum Composition > Clebsch-Gordan Coefficients > should correctly calculate coefficients for j1=1, j2=1/2 case
AssertionError: expected 1 to be less than 1e-10
 ‚ùØ __tests__/angularMomentum/composition.test.ts:46:63
     44|       // |3/2, 3/2‚ü© = |1, 1‚ü©|1/2, 1/2‚ü©
     45|       const c1 = clebschGordan(1, 1, 0.5, 0.5, 1.5, 1.5);
     46|       expect(math.abs(math.subtract(c1, math.complex(1, 0)))).toBeLess‚Ä¶
       |                                                               ^
     47|       
     48|       // |3/2, 1/2‚ü© = ‚àö(2/3)|1, 1‚ü©|1/2, -1/2‚ü© + ‚àö(1/3)|1, 0‚ü©|1/2, 1/2‚ü©

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[4/16]‚éØ

 FAIL  __tests__/angularMomentum/composition.test.ts > Angular Momentum Composition > Angular Momentum Addition > should correctly add two spin-1/2 states
AssertionError: expected 1 to be less than 1e-10
 ‚ùØ __tests__/angularMomentum/composition.test.ts:70:83
     68|       
     69|       // The first element should be 1 (|j=1, m=1‚ü© component)
     70|       expect(math.abs(math.subtract(combined.amplitudes[0], math.compl‚Ä¶
       |                                                                                   ^
     71|       
     72|       // The other elements should be 0 

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[5/16]‚éØ

 FAIL  __tests__/angularMomentum/operators.test.ts > Angular Momentum Operators > j=1/2 Matrix Representations > should have correct Jz matrix elements
AssertionError: expected Complex{ re: -0.5, im: +0 } to deeply equal Complex{ re: 0.5, im: +0 }

- Expected
+ Received

  Object {
    "im": 0,
    "mathjs": "Complex",
-   "re": 0.5,
+   "re": -0.5,
  }

 ‚ùØ __tests__/angularMomentum/operators.test.ts:48:28
     46|     it('should have correct Jz matrix elements', () => {
     47|       const matrix = jz.toMatrix();
     48|       expect(matrix[0][0]).toEqual(math.complex(1/2, 0));
       |                            ^
     49|       expect(matrix[1][1]).toEqual(math.complex(-1/2, 0));
     50|     });

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[6/16]‚éØ

 FAIL  __tests__/angularMomentum/operators.test.ts > Angular Momentum Operators > j=1/2 Matrix Representations > should have correct J¬± matrix elements
AssertionError: expected Complex{ re: 1, im: +0 } to deeply equal Complex{ re: +0, im: +0 }

- Expected
+ Received

  Object {
    "im": 0,
    "mathjs": "Complex",
-   "re": 0,
+   "re": 1,
  }

 ‚ùØ __tests__/angularMomentum/operators.test.ts:56:33
     54|       const jminusMatrix = jminus.toMatrix();
     55|       
     56|       expect(jplusMatrix[0][1]).toEqual(math.complex(0, 0));
       |                                 ^
     57|       expect(jplusMatrix[1][0]).toEqual(math.complex(1, 0));
     58|       expect(jminusMatrix[0][1]).toEqual(math.complex(1, 0));

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[7/16]‚éØ

 FAIL  __tests__/angularMomentum/operators.test.ts > Angular Momentum Operators > Eigenvalue Equations > should satisfy Jz eigenvalue equation
AssertionError: expected false to be true // Object.is equality

- Expected
+ Received

- true
+ false

 ‚ùØ __tests__/angularMomentum/operators.test.ts:86:64
     84|       console.log(result, typeof result);
     85|       
     86|       expect(result.equals(state.scale(math.complex(1/2, 0)))).toBe(tr‚Ä¶
       |                                                                ^
     87|     });
     88| 

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[8/16]‚éØ

 FAIL  __tests__/angularMomentum/operators.test.ts > Angular Momentum Operators > Eigenvalue Equations > should satisfy J¬≤ eigenvalue equation
AssertionError: expected false to be true // Object.is equality

- Expected
+ Received

- true
+ false

 ‚ùØ __tests__/angularMomentum/operators.test.ts:95:64
     93|       
     94|       // j(j+1) = 3/4 for j=1/2
     95|       expect(result.equals(state.scale(math.complex(3/4, 0)))).toBe(tr‚Ä¶
       |                                                                ^
     96|     });
     97|   });

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[9/16]‚éØ

 FAIL  __tests__/angularMomentum/operators.test.ts > Angular Momentum Operators > Commutation Relations > should satisfy [Jx,Jy] = iJz
AssertionError: expected false to be true // Object.is equality

- Expected
+ Received

- true
+ false

 ‚ùØ __tests__/angularMomentum/operators.test.ts:116:81
    114|       for (let i = 0; i < matrix1.length; i++) {
    115|         for (let j = 0; j < matrix1[i].length; j++) {
    116|           expect(math.abs(math.subtract(matrix1[i][j], matrix2[i][j]))‚Ä¶
       |                                                                                 ^
    117|         }
    118|       }

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[10/16]‚éØ

 FAIL  __tests__/angularMomentum/operators.test.ts > Angular Momentum Operators > J¬≤ Construction > should give same results for both J¬≤ construction methods
AssertionError: expected false to be true // Object.is equality

- Expected
+ Received

- true
+ false

 ‚ùØ __tests__/angularMomentum/operators.test.ts:136:81
    134|       for (let i = 0; i < matrix1.length; i++) {
    135|         for (let j = 0; j < matrix1[i].length; j++) {
    136|           expect(math.abs(math.subtract(matrix1[i][j], matrix2[i][j]))‚Ä¶
       |                                                                                 ^
    137|         }
    138|       }

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[11/16]‚éØ

 FAIL  __tests__/angularMomentum/states.test.ts > Angular Momentum States > j=1/2 State Vectors > should have correct components for |1/2,1/2‚ü©
AssertionError: expected false to be true // Object.is equality

- Expected
+ Received

- true
+ false

 ‚ùØ __tests__/angularMomentum/states.test.ts:39:82
     37|       const components = stateUp.getAmplitudes();
     38|       
     39|       expect(math.abs(math.subtract(components[0], math.complex(1, 0))‚Ä¶
       |                                                                                  ^
     40|       expect(math.abs(components[1]) < 1e-10).toBe(true);
     41|     });

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[12/16]‚éØ

 FAIL  __tests__/angularMomentum/states.test.ts > Angular Momentum States > j=1/2 State Vectors > should have correct components for |1/2,-1/2‚ü©
AssertionError: expected false to be true // Object.is equality

- Expected
+ Received

- true
+ false

 ‚ùØ __tests__/angularMomentum/states.test.ts:47:47
     45|       const components = stateDown.getAmplitudes();
     46|       
     47|       expect(math.abs(components[0]) < 1e-10).toBe(true);
       |                                               ^
     48|       expect(math.abs(math.subtract(components[1], math.complex(1, 0))‚Ä¶
     49|     });

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[13/16]‚éØ

 FAIL  __tests__/angularMomentum/states.test.ts > Angular Momentum States > Raising and Lowering Operations > should correctly raise states
AssertionError: expected false to be true // Object.is equality

- Expected
+ Received

- true
+ false

 ‚ùØ __tests__/angularMomentum/states.test.ts:65:44
     63|       // Compare with |j,m+1‚ü© scaled by ‚àö(j(j+1)-m(m+1))
     64|       const expectedState = createState(j, 0).scale(math.complex(expec‚Ä¶
     65|       expect(raised.equals(expectedState)).toBe(true);
       |                                            ^
     66|     });
     67| 

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[14/16]‚éØ

 FAIL  __tests__/angularMomentum/states.test.ts > Angular Momentum States > Raising and Lowering Operations > should correctly lower states
AssertionError: expected false to be true // Object.is equality

- Expected
+ Received

- true
+ false

 ‚ùØ __tests__/angularMomentum/states.test.ts:75:45
     73|       // Compare with |j,m-1‚ü© scaled by ‚àö(j(j+1)-m(m-1))
     74|       const expectedState = createState(j, -1).scale(math.complex(expe‚Ä¶
     75|       expect(lowered.equals(expectedState)).toBe(true);
       |                                             ^
     76|     });
     77| 

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[15/16]‚éØ

 FAIL  __tests__/angularMomentum/states.test.ts > Angular Momentum States > Raising and Lowering Operations > should annihilate highest/lowest weight states
AssertionError: expected false to be true // Object.is equality

- Expected
+ Received

- true
+ false

 ‚ùØ __tests__/angularMomentum/states.test.ts:85:44
     83|       const loweredLowest = jminus.apply(lowest);
     84|       
     85|       expect(raisedHighest.norm() < 1e-10).toBe(true);
       |                                            ^
     86|       expect(loweredLowest.norm() < 1e-10).toBe(true);
     87|     });

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[16/16]‚éØ

 Test Files  4 failed (4)
      Tests  14 failed | 11 passed (25)
   Start at  13:53:37
   Duration  580ms (transform 115ms, setup 0ms, collect 1.25s, tests 27ms, environment 0ms, prepare 204ms)

‚ÄâELIFECYCLE‚Äâ Test failed. See above for more details.
