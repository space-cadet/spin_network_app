import * as fs from 'fs';
import * as path from 'path';
import { fileURLToPath } from 'url'; // Import fileURLToPath
import { glob } from 'glob';

interface ComponentInfo {
  name: string;
  path: string;
  type: string;
  relatedFiles: string[];
}

// --- Configuration ---
// Get the directory name in an ESM-compatible way
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const projectRoot = path.resolve(__dirname, '..'); // Assumes script is in 'scripts/' directory
const componentsDir = path.join(projectRoot, 'src', 'components');
const outputFile = path.join(projectRoot, 'memory-bank/component_index.md');
const filePattern = '**/*.tsx'; // Pattern to find component files
// --- End Configuration ---

async function findComponents(): Promise<ComponentInfo[]> {
  const componentFiles = await glob(filePattern, { cwd: componentsDir, absolute: true });
  const components: ComponentInfo[] = [];

  for (const absolutePath of componentFiles) {
    const relativePath = path.relative(projectRoot, absolutePath);
    const dirName = path.dirname(absolutePath);
    const baseName = path.basename(absolutePath, '.tsx');

    // Basic heuristic: Use filename as component name
    // More complex logic could parse the file content if needed
    const componentName = baseName;

    // Check for related index.ts
    const relatedFiles: string[] = [];
    const indexTsPath = path.join(dirName, 'index.ts');
    if (fs.existsSync(indexTsPath)) {
       relatedFiles.push(path.relative(projectRoot, indexTsPath));
    }

    // Exclude common files like .DS_Store if they somehow match
    if (baseName.startsWith('.')) continue;
     // Exclude index files themselves from being listed as components
    if (baseName.toLowerCase() === 'index') continue;

    components.push({
      name: componentName,
      path: relativePath.replace(/\\/g, '/'), // Ensure forward slashes
      type: 'React Component', // Basic assumption
      relatedFiles: relatedFiles.map(p => p.replace(/\\/g, '/')),
    });
  }

  // Sort alphabetically by component name for consistency
  components.sort((a, b) => a.name.localeCompare(b.name));

  return components;
}

function generateMarkdown(components: ComponentInfo[]): string {
  const timestamp = new Date().toISOString();
  let markdown = `# Component Index\n`;
  markdown += `*Last Updated: ${timestamp} (Auto-generated)*\n\n`;
  markdown += `This file maps conceptual component names to their primary file locations. Paths are relative to the project root (\`${projectRoot}\`).\n\n`;

  markdown += `| Component Name                 | Primary File Path                                                     | Type/Description        | Related Files (Optional)                     |\n`;
  markdown += `|--------------------------------|-----------------------------------------------------------------------|-------------------------|----------------------------------------------|\n`;

  components.forEach(comp => {
    const related = comp.relatedFiles.length > 0 ? `\`${comp.relatedFiles.join('`, `')}\`` : '-';
    // Basic padding - adjust as needed for alignment
    const namePadded = comp.name.padEnd(30);
    const pathPadded = `\`${comp.path}\``.padEnd(70);
    const typePadded = comp.type.padEnd(23);

    markdown += `| ${namePadded} | ${pathPadded} | ${typePadded} | ${related.padEnd(44)} |\n`;
  });

  markdown += `\n## Notes\n`;
  markdown += `- This index focuses on primary entry points or key files for components/features found via \`.tsx\` files.\n`;
  markdown += `- This file is auto-generated by \`scripts/generate-component-index.ts\`. Do not edit manually.\n`;
  markdown += `- Keep this updated by running the script when components are added, moved, or renamed.\n`;

  return markdown;
}

async function run() {
  try {
    console.log(`Scanning for components in: ${componentsDir}`);
    const components = await findComponents();
    console.log(`Found ${components.length} potential components.`);

    if (components.length === 0) {
        console.warn("No components found. Check the 'componentsDir' and 'filePattern' configuration.");
        return;
    }

    console.log(`Generating Markdown...`);
    const markdownContent = generateMarkdown(components);

    console.log(`Writing index to: ${outputFile}`);
    fs.writeFileSync(outputFile, markdownContent, 'utf8');

    console.log('Component index generated successfully!');
  } catch (error) {
    console.error('Error generating component index:', error);
    process.exit(1);
  }
}

run();